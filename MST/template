//Prim算法
int cost[MAXN][MAXN];
int lowc[MAXN];     //存放树中结点到其他结点的最小值
bool vis[MAXN];
int Prim(int n)
{
    int ans = 0;
    memset(vis, false, sizeof(vis));
    for(int i = 0;i < n;++i) lowc[i] = cost[0][i];
    vis[0] = true;
    for(int i = 1;i < n;++i){
        int minc = INF;
        int p = -1;
        for(int j = 0;j < n;++j)
            if(!vis[j] && lowc[j] < minc){
                minc = lowc[j];
                p = j;
            }
            if(minc == INF) return -1;
            vis[p] = true;
            ans += minc;
            for(int j = 0;j < n;++j)
                if(!vis[j] && lowc[j] > cost[p][j])
                    lowc[j] = cost[p][j];
    }

    return ans;
}

//Kruskal算法
//使用并查集
int F[MAXN];
int cnt;
struct Edge{
    int u, v, w;
}E[MAXN];
void addEdge(int u, int v, int w)
{
    E[cnt].u = u;
    E[cnt].v = v;
    E[cnt++].w = w; 
}
bool cmp(Edge a, Edge b)
{
    return a.w<b.w;
}
int find(int x)
{
    if(F[x] == -1) return x;
    return F[x] = find(F[x]);
}
int Kruskal(int n)
{
    int ans = 0;
    int sum = 0;
    memset(F, -1, sizeof(F));
    sort(E, E+cnt, cmp);
    for(int i = 0;i < cnt;++i){
        int u = E[i].u;
        int v = E[i].v;
        int w = E[i].w;
        int t1 = find(u);
        int t2 = find(v);
        if(t1 != t2){
            F[t2] = t1;
            ans += w;
            sum++;
        }
        if(sum == n-1)  break;
    }
    if(sum != n-1)  return -1;

    return ans;
}