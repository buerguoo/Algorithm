// Dijkstra算法
//时间复杂度O(n*n)
const int MAXN = 1010;
#define typec int
const typec INF = 0x3f3f3f3f;
bool vis[MAXN];
int pre[MAXN];

void Dijkstra(typec cost[][MAXN],typec lowcost[], int n, int beg)
{
    for(int i = 0;i < n;i++)
    {
        lowcost[i] = INF;
        vis[i] = false;
        pre[i] = -1;
    }
    lowcost[beg] = 0;
    for(int j = 0;j < n;++j)
    {
        int k = -1;
        int min = INF;
        for(int i = 0;i < n;++i)
        {
            if(!vis[i]&&lowcost[i] < min)
            {
                min = lowcost[i];
                k = i;
            }
        }
        if(k == -1) break;
        vis[k] = true;
        for(int i = 0;i < n;++i)
        {
            if(!vis[i]&&lowcost[i] > lowcost[k]+cost[k][i])
            {
                lowcost[i] = lowcost[k]+cost[k][i];
                pre[i] = k;
            }
        }
    }
}

//Dijkstra+堆优化
//时间复杂度O(ElogE)
struct qnode{
    int u;
    int c;
    qnode(int _u=0, int _c=0):u(_u), c(_c){}
    bool operator <(const qnode &r)const{
        return c > r.c;
    } 
};
struct Edge{
    int u;
    int cost;
    Edge(int _u=0, int _c=0):u(_u), cost(_c){}
};

void Dijkstra(int start, int n)
{
    for(int i = 0;i < n;++i){
        vis[i] = false;
        dis[i] = INF;
    }
    dis[start] = 0;
    priorty_queue<qnode> Q;
    Q.push(qnode(start, 0));
    while(!Q.empty()){
        int u = Q.top();
        Q.pop();
        if(vis[u])  continue;
        vis[u] = true;
        for(int i = 0;i < E[u].size();++i){
            int v = E[u][i].v;
            int cost = E[u][i].cost;
            if(!vis[v] && dis[v] > dis[u]+cost){
                dis[v] = dis[u]+cost;
                Q.push(qnode(v, dis[v]));
            }
        }
    }
}

//Bellman_ford算法
//时间复杂度O(VE)
struct Edge{
    int u;
    int v;
    int cost;
    Edge(int _u=0, int _v=0;int _c=0):u(_u), v(_v), c(_c){}
};

void Bellman_ford(int start, int n)
{
    for(int i = 0;i < n;i++){
        vis[i] = false;
        dis[i] = INF;
    }
    dis[start] = 0;
    //最多做n-1次
    for(int i = 1;i < n;++i){
        bool flag = false;
        for(int j = 0;j < E.size();++j){
            Edge tmp = E[j];
            if(dis[tmp.v] > dis[tmp.u]+tmp.cost){
                dis[tmp.v] > dis[tmp.u]+tmp.cost;
                flag = true;
            }
        } 
        if(!flag)   return true;
    }
    for(int j = 0;j < n;++j)
        if(dis[E[j].v] > dis[E[j].u]+E[j].cost)
            return false;
    
    return true;
}

//SPFA  
//时间复杂度不确定，也可以使用栈
struct Edge{
    int v;
    int cost;
    Edge(int _v=0, int _c=0):v(_v), cost(_c){}
};

void SPFA(int start, int n)
{
    for(int i = 0;i < n;++i){
        vis[i] = false;
        dis[i] = INF;
        cnt[i] = 0;
    }
    queue<int> Q;
    Q.push(start);
    vis[start] = true;
    dis[start] = 0;
    cnt[start] = 1;
    while(!Q.empty()){
        int u = Q.top();
        Q.pop();
        vis[u] = false;
        for(int i = 0;i < E[u].size();++i){
            int v = E[u][i].v;
            int cost = E[u][i].cost;
            if(dis[v] > dis[u]+cost){
                dis[v] = dis[u] + cost;
                if(!vis[v]){
                    vis[v] = true;
                    Q.push(v);
                    if(++cnt[v] > n)    return false;
                }
            }
        }
    }

    return true;
}