#include <iostream>
#include <cstring>
#include <vector>
#include <cmath>
#include <cstdio>
#include <queue>
#include <fstream>
#include <map>
#include <algorithm>
using namespace std;
const int MAXN = 10010;
int g[MAXN][MAXN]; //邻接矩阵
bool used[MAXN];
int linker[MAXN];
bool dfs(int u){
    for(int v = 0;v < vN;++v){
        if(g[u][v] && !used[v]){
            used[v] = true;
            if(linker[v] == -1 || dfs(linker[v])){
                linker[v] = u;
                return true;
            }
        }
    }
    return false;
}
int hungry()
{
    int res = 0;
    memset(linker, -1, sizeof(linker));
    for(int u = 0;u < uN;++u){
        memset(used, false, sizeof(used));
        if(dfs(u)) res++;
    }
    return res;
}

/*
    邻接表的形式
    匈牙利算法
    主要应用于稀疏图
*/
#include <iostream>
#include <cstring>
#include <vector>
#include <cmath>
#include <cstdio>
#include <queue>
#include <fstream>
#include <map>
#include <algorithm>
using namespace std;
const int MAXN = 10010;
const int MAXM = 100010;
int linker[MAXN];
bool used[MAXN];
int head[MAXN], tol;
struct Edge{
    int to, next;
}E[MAXM];
void addEdge(int v, int u){
    E[tol].to = v;
    E[tol].next = head[u];
    head[u] = tol++;
}
//在添加边之前要初始化
void init()
{
    memset(head, -1, sizeof(head));
    tol = 0;
}
bool dfs(int u)
{
    int v;
    for(int i = head[u];i != -1;i = E[i].next){
        v = E[i].to;
        if(!used[v]){
            used[v] = false;
            if(linker[v] == -1 || dfs(linker[v])){
                linker[v] = u;
                return true;
            }
        }
    }
    return false;
}
int hungry()
{
    int res = 0;
    memset(linker, -1, sizeof(linker));
    for(int u = 0;u < uN;++u){
        memset(used, false, sizeof(used));
        if(dfs(u)) res++;
    }
    return res;
}