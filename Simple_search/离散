#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include<queue>
using namespace std;
#define MAXN 20

//边的数据结构，用来记录两个顶点以及权值
struct Edge
{
    int v1,v2,w;
}edges[MAXN*2];

int sign[MAXN]; //用以标记顶点位于哪一个树中，防止产生回路
int cot = 0;  //用以记录加入的边的个数

//在qsort函数中使用，使其为升序排列
int cmp(const void *a, const void *b)
{
    return ((struct Edge*)a)->w - ((struct Edge*)b)->w;
}

int main()
{
    int Enum,Vnum;
    int treeNum = 0;    //用以记录分支树的数量
    int Cost = 0; //记录总的耗费
    printf("Please enter the number of vertices and edges:");
    scanf("%d%d",&Vnum, &Enum);
    printf("Please enter information for the diagram:\n");
    for(int i = 0; i < Enum;++i)
        scanf("%d%d%d",&edges[i].v1,&edges[i].v2, &edges[i].w);
    
    memset(sign, 0, sizeof(sign));  //初始化标记数组

    //进行按照权值的升序排列
    qsort(edges, Enum, sizeof(edges[0]), cmp);
    
    //开始加边
    for(int i = 0;i < Enum;++i)
    {
        if(treeNum == Vnum-1)
            break;
        
        //如果两个顶点都没有进入树，则添加一个树
        if(!sign[edges[i].v1] && !sign[edges[i].v2])
            sign[edges[i].v1] = sign[edges[i].v2] = ++cot;
        else if(!sign[edges[i].v1] && sign[edges[i].v2])
            sign[edges[i].v1] = sign[edges[i].v2];
        else if(sign[edges[i].v1] && !sign[edges[i].v2])
            sign[edges[i].v2] = sign[edges[i].v1];
        //连接到该树后感染另一支树
        else{
            if(sign[edges[i].v2] != sign[edges[i].v1]){
            for(int j = 1;j <= Vnum;++j) if(sign[j] == sign[edges[i].v2])
                sign[j] = sign[edges[i].v1];
            }
            else
                continue;
        }
    
    printf("v1 = %d, v2 = %d, w = %d\n",edges[i].v1, edges[i].v2, edges[i].w);
    treeNum++;
    Cost += edges[i].w;
    }
    printf("Cost = %d\n",Cost);

    return 0;

}

